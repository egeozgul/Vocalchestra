from tkinter import *
from tkinter.ttk import Combobox

from pydub import AudioSegment
from pydub.playback import play
import importlib
#from PolyHack.pyRecord import *
#-------------------------------------------------------------------------------------------------------
#Huge credit and thanks to the python-sounddevice documentation page for 
#showing us how to use their library and record to .wav files
#https://python-sounddevice.readthedocs.io/en/0.3.14/index.html
import argparse
import tempfile
import queue
import sys
import threading as thread

import sounddevice as sd
import soundfile as sf
import numpy  # Make sure NumPy is loaded before it is used in the callback
assert numpy  # avoid "imported but unused" message (W0611)



class KillableThread(thread.Thread):
    def __init__(self, sleep_interval=1):
        super().__init__()
        self._kill = thread.Event()
        self._interval = sleep_interval

    def run(self):
        while True:
            print("Do Something")

            # If no kill signal is set, sleep for the interval,
            # If kill signal comes in while sleeping, immediately
            #  wake up and handle
            is_killed = self._kill.wait(self._interval)
            if is_killed:
                break

        print("Killing Thread")

    def kill(self):
        self._kill.set()

q = queue.Queue()
def int_or_str(text):
    """Helper function for argument parsing."""
    try:
        return int(text)
    except ValueError:
        return text

def callback(indata, frames, time, status):
    """This is called (from a separate thread) for each audio block."""
    if status:
        print(status, file=sys.stderr)
    q.put(indata.copy())


def return_name(name):
    return name

def runRecord(self):
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument(
        '-l', '--list-devices', action='store_true',
        help='show list of audio devices and exit')
    args, remaining = parser.parse_known_args()
    if args.list_devices:
        print(sd.query_devices())
        parser.exit(0)
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        parents=[parser])
    parser.add_argument(
        'filename', nargs='?', metavar='FILENAME',
        help='audio file to store recording to')
    parser.add_argument(
        '-d', '--device', type=int_or_str,
        help='input device (numeric ID or substring)')
    parser.add_argument(
        '-r', '--samplerate', type=int, help='sampling rate')
    parser.add_argument(
        '-c', '--channels', type=int, default=1, help='number of input channels')
    parser.add_argument(
        '-t', '--subtype', type=str, help='sound file subtype (e.g. "PCM_24")')
    args = parser.parse_args(remaining)
    try:
        if args.samplerate is None:
            device_info = sd.query_devices(args.device, 'input')
            # soundfile expects an int, sounddevice provides a float:
            args.samplerate = int(device_info['default_samplerate'])
        if args.filename is None:
            args.filename = tempfile.mktemp(prefix='voices',
                                            suffix='.wav', dir='')
        # Make sure the file is opened before recording anything:
        with sf.SoundFile(args.filename, mode='x', samplerate=args.samplerate,
                          channels=args.channels, subtype=args.subtype) as file:
            with sd.InputStream(samplerate=args.samplerate, device=args.device,
                                channels=args.channels, callback=callback):
                print('#' * 80)
                print('press Ctrl+C to stop the recording')
                print('#' * 80)
                while True:
                    file.write(q.get())
                    #is_killed = self._kill.wait(self._interval)
                    #if is_killed:
                    #    break


                print('\nRecording finished: ' + repr(args.filename))
                print(return_name(args.filename))
                parser.exit(0)
    except Exception as e:
        parser.exit(type(e).__name__ + ': ' + str(e))

#runRecord()




#-------------------------------------------------------------------------------------------------------
trackList = [];
master = Tk()


#t1 = thread.KillableThread(sleep_interval=1)
def record():
    
    #t1.start()
    print ("recording:)")
    Label(master, text="RECORDING").place(x=100, y=7)


#def kill(self):
    #self._kill.set()
def stop():
    #kill()
    print ("stop recording:)")
    Label(master, text="STOPPED     ").place(x=100, y=7)
   


def play():
    print ("playing")
    
    for x in range (1,1):
        mixed = AudioSegment.from_file()



global fileName;
fileName = StringVar()
def addTrack():
    isUnique = True;
    for i in trackList:
        if(i == fileName.get()):
            isUnique = False
            break
    if(isUnique == True):
        print("fileName:",fileName.get())
        Checkbutton(master, text=fileName.get()).pack(side = TOP,anchor=W)
        trackList.append(fileName.get())
    elif(isUnique == False):
        print("same name")
    
    
    

def playProject():
    print("playProject")


def saveProject():
    print("saveProject")

    


data=("violin", "guitar","trumpet","piano", "cello", "flute")
frame = Frame(master, height=130, width=350)


Button(master,text='record',command=record).place(x=5, y=5)
Button(master,text='stop',command=stop).place(x=55, y=5)
Combobox(master, values=data).place(x=5, y=37)
Button(master,text='play',command=play).place(x=155, y=35)


Label(master, text="file name").place(x=5, y=67)
Entry(master, bd =5,textvariable = fileName).place(x=65, y=65)
Button(master,text='add track',command=addTrack).place(x=195, y=65)

Button(master,text='play project',command=playProject).place(x=5, y=95)
Button(master,text='save project',command=saveProject).place(x=5, y=95)

frame.pack_propagate(0) # don't shrink
frame.pack()


mainloop()
